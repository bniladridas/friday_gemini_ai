---
name: Release
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      otp_code:
        description: 'RubyGems OTP code (required if MFA is enabled)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests (use with caution)'
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Run tests
        run: bundle exec ruby tests/runner.rb
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Run integration tests
        run: bundle exec ruby tests/integration/api.rb
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || inputs.skip_tests)
    outputs:
      gem-version: ${{ steps.gem-info.outputs.version }}
      gem-name: ${{ steps.gem-info.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Update version in gemspec
        run: |
          sed -i "s/spec\.version\s*=\s*['\"][^'\"]*['\"]/spec.version = '${{ inputs.version }}'/" *.gemspec

      - name: Build gem
        run: gem build *.gemspec

      - name: Get gem info
        id: gem-info
        run: |
          GEM_FILE=$(ls *.gem)
          GEM_NAME=$(basename "$GEM_FILE" .gem)
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          echo "name=$GEM_NAME" >> $GITHUB_OUTPUT
          echo "file=$GEM_FILE" >> $GITHUB_OUTPUT

      - name: Upload gem artifact
        uses: actions/upload-artifact@v5
        with:
          name: gem-release
          path: "*.gem"

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    environment: production
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'

      - name: Download gem artifact
        uses: actions/download-artifact@v6
        with:
          name: gem-release

      - name: Check if version exists on RubyGems
        id: check-rubygems
        run: |
          if gem list -r -e friday_gemini_ai | grep -q "${{ inputs.version }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Version ${{ inputs.version }} already exists on RubyGems"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version ${{ inputs.version }} is new, proceeding with publish"
          fi

      - name: Publish to RubyGems
        if: steps.check-rubygems.outputs.exists == 'false'
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:rubygems_api_key: ${RUBYGEMS_API_KEY}\n" > $HOME/.gem/credentials

          if [ -n "${{ inputs.otp_code }}" ]; then
            echo "Using provided OTP code for MFA"
            gem push *.gem --otp ${{ inputs.otp_code }}
          elif [ -n "${{ secrets.RUBYGEMS_OTP }}" ]; then
            echo "Using OTP from secrets"
            gem push *.gem --otp ${{ secrets.RUBYGEMS_OTP }}
          else
            echo "No OTP provided - this may fail if MFA is enabled"
            gem push *.gem
          fi
        env:
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}

      - name: Create and push tag
        if: steps.check-rubygems.outputs.exists == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git tag -a "v${{ inputs.version }}" -m "Release version ${{ inputs.version }}"
          git push origin "v${{ inputs.version }}"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, publish]
    if: needs.publish.result == 'success'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download gem artifact
        uses: actions/download-artifact@v6
        with:
          name: gem-release

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog for this version
            awk '/^## \[?v?${{ inputs.version }}\]?/{flag=1; next} /^## \[?v?[0-9]/{flag=0} flag' CHANGELOG.md > release_notes.md
          else
            echo "Release ${{ inputs.version }}" > release_notes.md
            echo "" >> release_notes.md
            echo "### Changes" >> release_notes.md
            echo "- Manual release triggered via GitHub Actions" >> release_notes.md
            echo "- See commit history for detailed changes" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.version }}
          name: Release ${{ inputs.version }}
          body_path: release_notes.md
          files: "*.gem"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
