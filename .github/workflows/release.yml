name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Pre-release Tests
    permissions:
      contents: read
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Ruby
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full ruby-bundler
        ruby --version
        bundle config set --local path 'vendor/bundle'
        bundle config set --local frozen false
        bundle install

    - name: Run tests
      run: |
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "::warning::GEMINI_API_KEY is not set. Some tests may be skipped."
        fi
        bundle exec rake test
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    - name: Run integration tests
      run: |
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "::warning::GEMINI_API_KEY is not set. Integration tests will be skipped."
          exit 0
        fi
        bundle exec ruby test/integration/api.rb
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
    outputs:
      gem-version: ${{ steps.gem-info.outputs.version }}
      gem-name: ${{ steps.gem-info.outputs.name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Ruby
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full ruby-bundler
        ruby --version
        bundle install

    - name: Build gem
      run: gem build *.gemspec

    - name: Get gem info
      id: gem-info
      run: |
        GEM_FILE=$(ls *.gem)
        GEM_NAME=$(basename "$GEM_FILE" .gem)
        GEM_VERSION=$(echo "$GEM_NAME" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
        echo "version=$GEM_VERSION" >> $GITHUB_OUTPUT
        echo "name=$GEM_NAME" >> $GITHUB_OUTPUT
        echo "file=$GEM_FILE" >> $GITHUB_OUTPUT

    - name: Upload gem artifact
      run: |
        # Create artifacts directory if it doesn't exist
        mkdir -p $GITHUB_WORKSPACE/artifacts
        # Copy gem file to artifacts directory
        cp *.gem $GITHUB_WORKSPACE/artifacts/
        echo "Gem file saved to $GITHUB_WORKSPACE/artifacts/"

    - name: Upload gem to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gem-file
        path: "*.gem"

  publish-gems:
    name: Publish Gems
    runs-on: ubuntu-latest
    needs: build
    environment: production
    permissions:
      contents: read

    steps:
    - name: Set up Ruby
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full ruby-bundler
        ruby --version

    - name: Get gem file
      run: |
        # Find the gem file in the artifacts directory
        GEM_FILE=$(ls $GITHUB_WORKSPACE/artifacts/*.gem | head -1)
        if [ -z "$GEM_FILE" ]; then
          echo "No gem file found in artifacts directory"
          exit 1
        fi
        # Copy gem file to current directory
        cp "$GEM_FILE" .
        GEM_FILE=$(basename "$GEM_FILE")
        GEM_NAME=$(basename "$GEM_FILE" .gem)
        # Extract version using a more robust method
        GEM_VERSION=$(echo "$GEM_NAME" | sed -E 's/.*-([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?)$/\1/')
        echo "version=$GEM_VERSION" >> $GITHUB_OUTPUT
        echo "name=$GEM_NAME" >> $GITHUB_OUTPUT
        echo "file=$GEM_FILE" >> $GITHUB_OUTPUT
      id: gem-info

    - name: Check if version exists on RubyGems
      id: check-rubygems
      continue-on-error: true
      run: |
        if gem list -r -e friday_gemini_ai | grep -q "${{ steps.gem-info.outputs.version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "::notice::Version ${{ steps.gem-info.outputs.version }} already exists on RubyGems, skipping publish"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Publish to RubyGems
      if: steps.check-rubygems.outputs.exists == 'false'
      run: |
        # Check if RubyGems API key is available
        if [ -z "$RUBYGEMS_API_KEY" ]; then
          echo "::warning::RUBYGEMS_API_KEY is not set. Skipping RubyGems publish."
          exit 0
        fi

        # Set up RubyGems credentials
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        echo ":rubygems_api_key: $RUBYGEMS_API_KEY" > $HOME/.gem/credentials

        # Build gem push command
        PUSH_CMD="gem push *.gem"

        # Add OTP if provided
        if [ -n "$RUBYGEMS_OTP" ]; then
          PUSH_CMD="$PUSH_CMD --otp $RUBYGEMS_OTP"
        fi

        # Execute the push command
        echo "Publishing gem to RubyGems..."
        if $PUSH_CMD; then
          echo "::notice::Successfully published $GEM_FILE to RubyGems"
        else
          echo "::error::Failed to publish to RubyGems"
          exit 1
        fi

  publish-gh:
    name: Publish GH
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
    - name: Set up Ruby
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full ruby-bundler
        ruby --version

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Get gem file
      run: |
        # Find the gem file in the artifacts directory
        GEM_FILE=$(ls $GITHUB_WORKSPACE/artifacts/*.gem | head -1)
        if [ -z "$GEM_FILE" ]; then
          echo "No gem file found in artifacts directory"
          exit 1
        fi
        # Copy gem file to current directory
        cp "$GEM_FILE" .

    - name: Publish to GitHub Packages
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- ":github: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials

        # Push to GitHub Packages
        gem push --key github --host https://rubygems.pkg.github.com/${{ github.repository_owner }} *.gem || \
          echo "::warning::Failed to publish to GitHub Packages (this might be expected if the package already exists)"
      env:
        GEM_HOST_API_KEY: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, publish-gems, publish-gh]
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download gem
      uses: actions/download-artifact@v5
      with:
        name: gem-file

    - name: Set up environment
      id: setup
      run: |
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y curl jq git

          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Get the gem file from artifacts
          mkdir -p release_assets
          cp $GITHUB_WORKSPACE/artifacts/*.gem release_assets/ 2>/dev/null || echo "No gem file found in artifacts"

          # Get the current tag (from the tag that triggered the workflow)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT

          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 --match 'v*' HEAD~1 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT

          # Get the version from the gem file
          GEM_FILE=$(ls release_assets/*.gem 2>/dev/null | head -1 || true)
          if [ -n "$GEM_FILE" ] && [ -f "$GEM_FILE" ]; then
            GEM_NAME=$(basename "$GEM_FILE" .gem)
            VERSION=$(echo "$GEM_NAME" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+.*' || echo "$CURRENT_TAG")
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "gem_name=$GEM_NAME" >> $GITHUB_OUTPUT
          else
            echo "version=${CURRENT_TAG#v}" >> $GITHUB_OUTPUT
            echo "gem_name=friday_gemini_ai" >> $GITHUB_OUTPUT
          fi

    - name: Generate changelog
      id: changelog
      run: |
          # Get current version and previous tag from setup step
          VERSION="${{ steps.setup.outputs.version }}"
          PREV_TAG="${{ steps.setup.outputs.previous_tag }}"

          # Generate changelog from git log
          if [ -n "$PREV_TAG" ] && [ "$PREV_TAG" != "null" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" "$PREV_TAG"..HEAD 2>/dev/null | grep -v '^\s*$' || echo "No changes detected")
          else
            CHANGELOG=$(git log --pretty=format:"- %s" | grep -v '^\s*$' || echo "Initial release")
          fi

          # Set outputs
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "# Release v$VERSION" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Changelog" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Installation" >> $GITHUB_OUTPUT
          echo '```bash' >> $GITHUB_OUTPUT
          echo "gem install $GEM_NAME -v $VERSION" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Also set as environment variable for next steps
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_ENV

          # Create release notes header
          echo "# Release $VERSION" > release_notes.md
          echo "" >> release_notes.md

          # Get all commits since last tag
          echo "## 🚀 Changes" >> release_notes.md
          echo "" >> release_notes.md

          # Get conventional commits since last tag
          if [ -n "$PREV_TAG" ] && [ "$PREV_TAG" != "null" ]; then
            git log --pretty=format:"- %s (%h)" --no-merges "$PREV_TAG"..HEAD 2>/dev/null | \
              grep -v '^\- chore' | \
              sort >> release_notes.md || \
              echo "- No notable changes" >> release_notes.md

            # Get contributors
            echo "" >> release_notes.md
            echo "## 👥 Contributors" >> release_notes.md
            echo "" >> release_notes.md

            # Get unique contributors with their commit counts
            git shortlog -sne --no-merges "$PREV_TAG"..HEAD 2>/dev/null | \
              cut -f 2- | \
              sort -u | \
              sed 's/^/- /' >> release_notes.md || \
              echo "- No contributors found" >> release_notes.md
          else
            # For first release, show all commits
            git log --pretty=format:"- %s (%h)" --no-merges | \
              grep -v '^\- chore' | \
              sort >> release_notes.md || \
              echo "- Initial release" >> release_notes.md

            echo "" >> release_notes.md
            echo "## 👥 Contributors" >> release_notes.md
            echo "" >> release_notes.md

            git shortlog -sne --no-merges | \
              cut -f 2- | \
              sort -u | \
              sed 's/^/- /' >> release_notes.md || \
              echo "- No contributors found" >> release_notes.md
          fi

          # Add link to full changelog if it exists
          if [ -f "CHANGELOG.md" ]; then
            echo "" >> release_notes.md
            echo "## 📝 Full Changelog" >> release_notes.md
            echo "" >> release_notes.md
            echo "For a detailed list of all changes, see the [full changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)." >> release_notes.md
          fi

    - name: Create GitHub Release
      id: create_release
      run: |
          # Get the release notes
          RELEASE_NOTES=$(cat release_notes.md)
          TAG_NAME="${{ github.ref_name }}"

          # Create the release using GitHub API
          RELEASE_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"Release $TAG_NAME\",\"body\":$(jq -Rs '.' <<< "$RELEASE_NOTES"),\"draft\":false,\"prerelease\":false}")

          # Extract the upload URL
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')

          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "null" ]; then
            echo "::error::Failed to create release: $RELEASE_RESPONSE"
            exit 1
          fi

          # Upload gem file if it exists
          GEM_FILE=$(ls release_assets/*.gem 2>/dev/null | head -1)
          if [ -n "$GEM_FILE" ]; then
            GEM_NAME=$(basename "$GEM_FILE")
            UPLOAD_RESPONSE=$(curl -s \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$GEM_FILE" \
              "${UPLOAD_URL}?name=$GEM_NAME")

            if [ "$(echo "$UPLOAD_RESPONSE" | jq -r '.message' 2>/dev/null)" != "null" ]; then
              echo "::warning::Failed to upload asset: $UPLOAD_RESPONSE"
            else
              echo "Successfully uploaded $GEM_NAME"
            fi
          fi

          # Set output with release URL
          RELEASE_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.html_url')
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
