name: Gemini Tools

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  push:
    branches: [main]

# Required permissions
permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  gemini-cli:
    name: Gemini CLI
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    container: node:20-slim
    timeout-minutes: 15
    
    steps:
    - name: Install Gemini CLI
      run: |
        # Install Node.js dependencies
        npm install -g @google/generative-ai
        
        # Create Gemini CLI wrapper
        cat > /usr/local/bin/gemini << 'EOL'
        #!/bin/sh
        node -e "import('@google/generative-ai').then(m => console.log(m.GOOGLE_GENERATIVE_AI_VERSION))"
        EOL
        
        # Make the script executable
        chmod +x /usr/local/bin/gemini

    - name: Verify installation
      run: |
        # Test the installation
        gemini

  pr-bot:
    name: PR Bot
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container: node:20-slim
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for git diff

    - name: Install Dependencies
      run: |
        # Install Python, pip, and venv
        apt-get update && apt-get install -y --no-install-recommends \
            python3 \
            python3-pip \
            python3-venv
          
        # Create and activate Python virtual environment
        python3 -m venv /opt/venv
        . /opt/venv/bin/activate
          
        # Install Python packages in the virtual environment
        pip install --no-cache-dir PyGithub python-dotenv
          
        # Install Google's Generative AI package globally
        npm install -g @google/generative-ai
          
        # Create Gemini CLI wrapper
        cat > /usr/local/bin/gemini << 'EOL'
        #!/usr/bin/env node
        import('@google/generative-ai').then(m => console.log(m.GOOGLE_GENERATIVE_AI_VERSION))
        EOL
          
        # Make the script executable
        chmod +x /usr/local/bin/gemini

    - name: Run Gemini PR Bot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        cat > pr_bot.py << 'EOF'
        import os
        import sys
        import subprocess
        from github import Github
        from dotenv import load_dotenv
        
        load_dotenv()
        
        def get_gemini_analysis(pr_title, pr_body, changes):
            """Generate analysis using Gemini API"""
            try:
                # Simple analysis - can be enhanced with actual Gemini API calls
                analysis = []
                analysis.append("## ü§ñ AI-Powered PR Analysis")
                analysis.append("### Key Changes Detected")
                
                # Add basic analysis
                total_changes = sum(1 for line in changes if line.startswith("File:"))
                analysis.append(f"- Total files changed: {total_changes}")
                
                # Add PR details
                analysis.append("\n### PR Summary")
                analysis.append(f"**Title:** {pr_title}")
                analysis.append(f"**Description:** {pr_body[:300]}{'...' if len(pr_body) > 300 else ''}")
                
                # Add file changes summary
                analysis.append("\n### Changed Files")
                for i, change in enumerate(changes[:10]):  # Limit to first 10 files
                    if change.startswith("File:"):
                        analysis.append(f"- {change[6:]}")
                
                if total_changes > 10:
                    analysis.append(f"- ... and {total_changes - 10} more files")
                
                return "\n".join(analysis)
                
            except Exception as e:
                print(f"Error generating analysis: {str(e)}")
                return "## ‚ö†Ô∏è Error generating AI analysis"
        
        def main():
            try:
                # Get PR details from environment
                repo_name = os.environ.get('GITHUB_REPOSITORY')
                pr_number = int(os.environ.get('GITHUB_REF').split('/')[2])
                
                # Initialize GitHub client
                g = Github(os.environ.get('GITHUB_TOKEN'))
                repo = g.get_repo(repo_name)
                pr = repo.get_pull(pr_number)
                
                # Get PR details
                title = pr.title
                body = pr.body or ''
                changes = []
                
                # Get changed files
                for file in pr.get_files():
                    changes.append(f"File: {file.filename}")
                    changes.append(f"Status: {file.status}")
                    changes.append(f"Changes: +{file.additions} -{file.deletions}")
                    changes.append("-" * 30)
                
                # Generate AI analysis
                review = get_gemini_analysis(title, body, changes)
                
                # Add footer
                review += "\n\n---\n"
                review += "*This is an automated review. Please verify all changes before merging.*"
                
                # Post review as a comment
                pr.create_issue_comment(review)
                print("PR review posted successfully!")
                
            except Exception as e:
                print(f"Error in PR bot: {str(e)}")
                sys.exit(1)
        
        if __name__ == "__main__":
            main()
        EOF
        
        python3 pr_bot.py
