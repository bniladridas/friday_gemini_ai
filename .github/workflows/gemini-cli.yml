name: Gemini PR Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

# Required permissions for the GitHub Token
permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  code-review:
    name: Gemini Code Review
    runs-on: ubuntu-latest
    container: node:20-slim
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for git diff

    - name: Install Gemini CLI
      run: npm install -g @google/gemini-cli

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub python-dotenv

    - name: Run Gemini PR Bot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        cat > pr_bot.py << 'EOF'
        # PR Bot implementation will go here
        import os
        import sys
        from github import Github
        from dotenv import load_dotenv
        
        load_dotenv()
        
        def main():
            # Get PR details from environment
            repo_name = os.environ.get('GITHUB_REPOSITORY')
            pr_number = int(os.environ.get('GITHUB_REF').split('/')[2])
            
            # Initialize GitHub client
            g = Github(os.environ.get('GITHUB_TOKEN'))
            repo = g.get_repo(repo_name)
            pr = repo.get_pull(pr_number)
            
            # Get PR details
            title = pr.title
            body = pr.body or ''
            changes = []
            
            # Get changed files
            for file in pr.get_files():
                changes.append(f"File: {file.filename}")
                changes.append(f"Status: {file.status}")
                changes.append(f"Additions: {file.additions}, Deletions: {file.deletions}")
                changes.append("-" * 50)
            
            # Generate review using Gemini CLI
            # This is a placeholder - you'll need to implement the actual Gemini API call
            review = "## ðŸ¤– Gemini PR Review\n\n"
            review += "### PR Summary\n"
            review += f"**Title:** {title}\n\n"
            review += f"**Description:**\n{body[:500]}{'...' if len(body) > 500 else ''}\n\n"
            review += "### Changes Summary\n"
            review += "\n".join(changes[:20])  # Limit changes to avoid hitting size limits
            
            if len(changes) > 20:
                review += "\n... and more changes (truncated for brevity)"
            
            # Post review as a comment
            pr.create_issue_comment(review)
            print("PR review posted successfully!")
        
        if __name__ == "__main__":
            main()
        EOF
        
        python pr_bot.py
