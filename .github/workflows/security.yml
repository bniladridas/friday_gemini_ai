name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write

env:
  GEM_HOME: /usr/local/bundle
  BUNDLE_PATH: vendor/bundle
  BUNDLE_JOBS: 4
  BUNDLE_RETRY: 3

jobs:
  scan:
    name: Scan
    runs-on: ubuntu-latest
    container:
      image: ruby:3.2-slim
    steps:
      - name: Install Git
        run: |
          apt-get update && apt-get install -y --no-install-recommends git

      - name: Configure Git and checkout code
        run: |
          # Configure Git safe directories
          for dir in /__w/friday_gemini_ai /__w/friday_gemini_ai/friday_gemini_ai /github/workspace; do
            git config --global --add safe.directory "$dir" || true
          done
        
          # Clone and checkout
          git clone --no-checkout "https://github.com/${{ github.repository }}" .
          git fetch origin "${{ github.event.pull_request.head.sha || github.sha }}"
          git checkout "${{ github.event.pull_request.head.sha || github.sha }}"

      - name: Set up Ruby environment
        run: |
          # Install Ruby system dependencies
          apt-get update && apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            curl \
            git \
            libssl-dev \
            zlib1g-dev \
            libyaml-dev \
            libreadline-dev \
            libxml2-dev \
            libxslt1-dev \
            libcurl4-openssl-dev \
            libffi-dev \
            ruby-dev \
            ruby-bundler \
            pkg-config
          
          # Install Ruby gems
          gem install bundler
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Set up environment
        run: |
          # Set environment variables
          echo "GEM_HOME=$HOME/.gem" >> $GITHUB_ENV
          echo "GEM_PATH=$HOME/.gem" >> $GITHUB_ENV
          echo "PATH=$HOME/.gem/bin:$PATH" >> $GITHUB_ENV
          echo "GITLEAKS_VERSION=8.28.0" >> $GITHUB_ENV

      # Install and run Gitleaks for secret scanning
      # - name: Run Gitleaks
      #   uses: gitleaks/gitleaks-action@v2.0.0
      #   continue-on-error: true

      # Run bundle audit for Ruby dependency vulnerabilities
      - name: Run security audit
        run: |
          echo "Running bundle audit..."
          cd "$GITHUB_WORKSPACE"
          bundle audit check --update --quiet --format json > bundler-audit.json || echo "Bundle audit completed with findings"
        continue-on-error: true

      # Additional security checks: dependency vulnerabilities and code security
      # Check and update vulnerable dependencies
      - name: Check for vulnerable dependencies
        run: |
          # Temporarily unfreeze bundle for updates
          bundle config set --local frozen false
          
          # Update to latest version of thor to fix vulnerability
          bundle update thor
          
          # Run security audit without failing the build
          bundle audit check --update || true
          
          # Re-enable frozen mode
          bundle config set --local frozen true

      # Upload Reports
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            bundler-audit.json
          retention-days: 90

      # Upload SARIF reports to GitHub Security tab if the file exists
      # - name: Upload SARIF report
      #   if: success() && hashFiles('gitleaks.sarif') != ''
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: gitleaks.sarif
      #   id: sarif_upload

      # Fail the job if critical vulnerabilities found
      - name: Check for critical vulnerabilities
        if: steps.bundler_audit.outputs.vulnerabilities_found == 'true'
        run: |
          echo "Critical vulnerabilities found! Check the Bundler Audit report."
          exit 1

      - name: Check for vulnerabilities
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "bundler-audit.json" ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' bundler-audit.json 2>/dev/null || echo "0")
            echo "### Bundler Audit: $VULN_COUNT vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            
            if [ "$VULN_COUNT" -gt "0" ]; then
              echo "[ERROR] Vulnerabilities detected in dependencies" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "[SUCCESS] No vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [ -f "brakeman.json" ]; then
            WARN_COUNT=$(jq '.warnings | length' brakeman.json 2>/dev/null || echo "0")
            echo "### Brakeman: $WARN_COUNT security warnings found" >> $GITHUB_STEP_SUMMARY
            
            if [ "$WARN_COUNT" -gt "0" ]; then
              echo "[WARNING] Security warnings detected in code" >> $GITHUB_STEP_SUMMARY
            else
              echo "[SUCCESS] No security warnings found in code" >> $GITHUB_STEP_SUMMARY
            fi
          fi