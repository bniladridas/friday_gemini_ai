name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git diff in Gitleaks

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      # Dependency Security
      - name: Install dependencies
        run: |
          gem install bundler-audit
          bundle install

      - name: Run security audit
        run: |
          bundle exec bundler-audit update
          # Continue even if vulnerabilities are found
          bundle exec bundler-audit check --update || echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          bundle exec bundler-audit check --format json --output bundler-audit.json || true

      - name: Run static code analysis
        run: |
          # Run Brakeman with --force since this isn't a Rails app
          bundle exec brakeman --no-exit-on-warn --no-exit-on-error --force --format json --output brakeman.json --no-pager || true
          bundle exec brakeman --no-exit-on-warn --no-exit-on-error --force --format html --output brakeman.html --no-pager || true
        continue-on-error: true

      # Secret Scanning with Gitleaks
      - name: Run Gitleaks
        run: |
          # Install Gitleaks using official GitHub release
          GITLEAKS_VERSION="8.18.0"
          wget -O gitleaks.tar.gz "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
          tar -xzf gitleaks.tar.gz gitleaks
          chmod +x gitleaks
          ./gitleaks version
          
          # Create a minimal Gitleaks config file
          cat > gitleaks-config.toml << 'EOL'
          [allowlist]
            description = "Global allowlist"
            paths = [
              "**/*.md",
              "**/*.txt",
              "**/test/**",
              "**/spec/**",
              "**/vendor/**"
            ]
            
            [allowlist.regexes]
            description = "Allowed patterns"
            regex = [
              ".*example.*",
              ".*test.*",
              ".*mock.*"
            ]
          EOL
          
          # Run Gitleaks with the generated config
          ./gitleaks detect --source=. --config=gitleaks-config.toml --report-format=json --report-path=gitleaks.json --no-git || echo "Gitleaks scan completed with findings"
          
          # Create SARIF report if gitleaks.json exists
          if [ -f "gitleaks.json" ]; then
            echo "Creating SARIF report"
            cp gitleaks.json gitleaks.sarif
          fi
        continue-on-error: true

      # Dependency Scanning (using GitHub's built-in Dependabot)
      - name: Check for vulnerable dependencies
        run: |
          # Update to latest version of thor to fix vulnerability
          bundle update thor
          bundle audit check --update || true

      # Upload Reports
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            bundler-audit.json
            brakeman.*
            gitleaks.*
          retention-days: 90

      # Upload SARIF reports to GitHub Security tab if the file exists
      - name: Upload SARIF report
        run: |
          if [ -f "gitleaks.sarif" ]; then
            echo "Uploading SARIF report"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/code-scanning/sarifs" \
              -d '{"commit_sha":"${{ github.sha }}","ref":"${{ github.ref }}","sarif":"$(cat gitleaks.sarif | jq -Rsa . | sed 's/\\\"/\\"/g' | sed 's/\\\\n/\\n/g' | sed 's/\\\\t/\\t/g' | sed 's/\\\\r/\\r/g' | sed 's/\\\\b/\\b/g' | sed 's/\\\\f/\\f/g')"}'

      # Fail the job if critical vulnerabilities found
      - name: Check for critical vulnerabilities
        if: steps.bundler-audit.outputs.vulnerabilities_found == 'true'
        run: |
          echo "Critical vulnerabilities found! Check the Bundler Audit report."
          exit 1

      - name: Check for vulnerabilities
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "bundler-audit.json" ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' bundler-audit.json 2>/dev/null || echo "0")
            echo "### Bundler Audit: $VULN_COUNT vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            
            if [ "$VULN_COUNT" -gt "0" ]; then
              echo "[ERROR] Vulnerabilities detected in dependencies" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "[SUCCESS] No vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [ -f "brakeman.json" ]; then
            WARN_COUNT=$(jq '.warnings | length' brakeman.json 2>/dev/null || echo "0")
            echo "### Brakeman: $WARN_COUNT security warnings found" >> $GITHUB_STEP_SUMMARY
            
            if [ "$WARN_COUNT" -gt "0" ]; then
              echo "[WARNING] Security warnings detected in code" >> $GITHUB_STEP_SUMMARY
            else
              echo "[SUCCESS] No security warnings found in code" >> $GITHUB_STEP_SUMMARY
            fi
          fi