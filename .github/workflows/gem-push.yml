name: Ruby Gem

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build + Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby 3.1.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1.2'
          # Don't use bundler-cache as we need to modify bundler settings
          bundler-cache: false

      - name: Configure Bundler
        run: |
          gem install bundler -v 2.3.26
          bundle config set --local frozen false
          bundle config set --local path vendor/bundle

      - name: Install Dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Run CI Tests
        run: bundle exec rake ci_test

      - name: Build Gem
        run: |
          gem build *.gemspec
          echo "GEM_VERSION=$(gem specification friday_gemini_ai | grep version | awk '{print $2}')" >> $GITHUB_ENV
          echo "Built gem version: $GEM_VERSION"

  publish:
    name: Publish
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1.2'

      - name: Build Gem
        run: |
          gem build *.gemspec
          echo "GEM_VERSION=$(gem specification friday_gemini_ai | grep version | awk '{print $2}')" >> $GITHUB_ENV
          echo "Built gem version: $GEM_VERSION"

      - name: Check if version exists on GitHub Packages
        id: check_gpr
        continue-on-error: true
        run: |
          gem install gems
          if gem list -r -e friday_gemini_ai --source "https://rubygems.pkg.github.com/${OWNER}" | grep -q "$GEM_VERSION"; then
            echo "Version $GEM_VERSION already exists on GitHub Packages. Skipping push."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $GEM_VERSION does not exist on GitHub Packages."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          OWNER: ${{ github.repository_owner }}

      - name: Publish to GitHub Packages
        if: steps.check_gpr.outputs.exists == 'false'
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:github: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
          gem push --key github --host https://rubygems.pkg.github.com/${OWNER} *.gem
        env:
          GEM_HOST_API_KEY: "${{secrets.GITHUB_TOKEN}}"
          OWNER: ${{ github.repository_owner }}

      - name: Check if version exists on RubyGems
        id: check_rubygems
        continue-on-error: true
        run: |
          if gem list -r -e friday_gemini_ai | grep -q "$GEM_VERSION"; then
            echo "Version $GEM_VERSION already exists on RubyGems. Skipping push."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $GEM_VERSION does not exist on RubyGems."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to RubyGems
        if: steps.check_rubygems.outputs.exists == 'false'
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:rubygems_api_key: ${RUBYGEMS_API_KEY}\n" > $HOME/.gem/credentials
          gem push *.gem
        env:
          RUBYGEMS_API_KEY: "${{secrets.RUBYGEMS_API_KEY}}"
