#!/usr/bin/env ruby

# CLI interface for GeminiAI gem
require_relative '../config/environment'

def show_help
  puts <<~HELP
    GeminiAI CLI Tool

    Usage:
      gemini_ai [command] [options]

    Commands:
      generate <prompt>     Generate text from prompt
      chat                  Start interactive chat session
      test                  Test API connection
      help                  Show this help message

    Examples:
      gemini_ai generate "Write a haiku about Ruby"
      gemini_ai chat
      gemini_ai test
  HELP
end

def generate_text(prompt)
  client = GeminiAI::Client.new
  response = client.generate_text(prompt)
  puts response
rescue GeminiAI::Error => e
  puts "Error: #{e.message}"
  exit 1
end

def interactive_chat
  client = GeminiAI::Client.new
  messages = []

  puts "GeminiAI Chat Session (type 'exit' to quit)"
  puts "=" * 40

  loop do
    print "You: "
    input = gets.chomp
    break if input.downcase == 'exit'

    messages << { role: 'user', content: input }

    begin
      response = client.chat(messages)
      puts "AI: #{response}"
      messages << { role: 'model', content: response }
    rescue GeminiAI::Error => e
      puts "Error: #{e.message}"
    end
  end

  puts "Chat session ended."
end

def test_connection
  puts "Testing GeminiAI connection..."

  client = GeminiAI::Client.new
  response = client.generate_text("Say 'Connection successful!'")

  puts "[SUCCESS] Test successful!"
  puts "Response: #{response}"
rescue GeminiAI::Error => e
  puts "[ERROR] Test failed: #{e.message}"
  exit 1
end

# Main CLI logic
case ARGV[0]
when 'generate'
  if ARGV[1]
    generate_text(ARGV[1])
  else
    puts "Error: Please provide a prompt"
    puts "Usage: gemini_ai generate \"Your prompt here\""
    exit 1
  end
when 'chat'
  interactive_chat
when 'test'
  test_connection
when 'help', nil
  show_help
else
  puts "Unknown command: #{ARGV[0]}"
  show_help
  exit 1
end
