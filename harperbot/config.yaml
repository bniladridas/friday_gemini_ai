---
# HarperBot Configuration
# This file configures HarperBot's analysis behavior. Modify these settings to customize the bot's performance and output.
# Customize the analysis focus and model

# Analysis focus: 'all', 'security', 'performance', 'quality'
# Options: 'all' for comprehensive review, 'security' for security issues only, 'performance' for optimization suggestions, 'quality' for code quality feedback
focus: all

# Gemini model to use
# Available options: 'gemini-1.5-flash', 'gemini-1.5-pro', 'gemini-2.0-flash', 'gemini-2.5-flash', 'gemini-2.5-pro'
# Recommendations: 'gemini-2.0-flash-exp' for fast, cost-effective analysis; 'gemini-2.5-pro-exp' for higher quality but slower responses
# See https://ai.google.dev/models/gemini for the full list and latest models
model: gemini-2.0-flash

# Maximum diff length to analyze (characters)
# Limits the size of diff content sent to AI. Larger values provide more context but may hit token limits or increase costs
max_diff_length: 4000

# Temperature for generation (0.0 to 1.0)
# Controls randomness in AI responses. Lower values (0.0-0.3) for consistent, focused analysis; higher for more creative suggestions.
temperature: 0.2

# Maximum output tokens
# Maximum length of AI response in tokens. Higher allows more detailed analysis but increases cost.
max_output_tokens: 4096

# Enable code authoring features
# When enabled, HarperBot can create commits, branches, and PRs with improvements
enable_authoring: false

# Auto-commit suggestions to PR branches
# Applies code suggestions directly to the PR's head branch
auto_commit_suggestions: false

# Create improvement PRs
# Generates new PRs with additional improvements beyond the original changes
create_improvement_prs: false

# Branch naming pattern for improvement PRs
# {timestamp} and {pr_number} will be replaced with actual values
improvement_branch_pattern: "harperbot-improvements-{timestamp}"

# AI analysis prompt template
# Customize the prompt to change how HarperBot analyzes code
prompt: |
  **Files Changed** ({num_files}):
  {files_list}

  ```diff
  {diff_content}
  ```

  {focus_instruction}

  Provide a concise code review analysis in this format:

  ## Summary
  [Brief overview of changes and purpose]

  ### Scores
  - Code Quality: [score]/10
  - Maintainability: [score]/10
  - Security: [score]/10

  ### Strengths
  - [Key positives]
  - [What's working well]

  ### Areas Needing Attention
  - [Potential issues or improvements]
  - [Be specific and constructive]

  ### Recommendations
  - [Specific suggestions for code, docs, or tests]

  ### Code Suggestions
  - [Provide specific code changes as diff blocks]
  - [Use ```diff format for each suggestion]

  ### Next Steps
  - [Actionable items for the author]
